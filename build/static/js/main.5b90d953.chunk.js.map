{"version":3,"sources":["components/header.jsx","components/todoItem.jsx","components/todolist.jsx","components/addTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Card","style","background","Body","color","Component","ToDoItem","state","displayColorPicker","handleClick","setState","handleClose","handleChangeComplete","console","log","hex","colorChange","props","changeCardColorFn","todo","toggleTodo","updateTodoFn","deleteTodoItem","key","deleteTodoFn","this","backgroundColor","bodyColor","category","display","Title","changeCardTitle","type","text","Button","variant","size","onClick","position","zIndex","top","right","bottom","left","triangle","onChangeComplete","classes","completed","ToDoList","changeCardColor","changeColorFn","updateTodo","deleteTodoList","todos","Container","CardColumns","map","_todo","AddToDo","getElement","e","target","value","dataBefore","dataAfter","newWord","newDecorator","i","length","push","join","j","currentItem","Date","now","submitTodo","addTodo","document","getElementById","InputGroup","FormControl","placeholder","aria-label","aria-describedby","id","onChange","Append","App","componentDidMount","localStorage","getItem","savedTodos","JSON","parse","a","setItem","stringify","changeColor","newColor","newTodos","deleteTodo","filteredTodos","filter","bind","handleInput","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b90d953.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"text-center mb-3\">\r\n        <Card style={({ height: \"25em\" }, { background: \"#2962ff\" })}>\r\n          <Card.Body>\r\n            <h1 style={{ color: \"white\" }}>TuDu</h1>\r\n          </Card.Body>\r\n        </Card>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./todoItem.css\";\r\nimport { TwitterPicker } from \"react-color\";\r\nclass ToDoItem extends Component {\r\n  state = {\r\n    displayColorPicker: false,\r\n    background: \"#fff\"\r\n  };\r\n  render() {\r\n    const { todo } = this.props;\r\n\r\n    const popover = {\r\n      position: \"absolute\",\r\n      zIndex: \"2\"\r\n    };\r\n\r\n    const cover = {\r\n      position: \"fixed\",\r\n      top: \"0px\",\r\n      right: \"0px\",\r\n      bottom: \"0px\",\r\n      left: \"0px\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Card\r\n          className=\"card text-center\"\r\n          key={todo.key}\r\n          style={\r\n            ({ width: \"18em\" },\r\n            { height: \"12em\" },\r\n            { backgroundColor: todo.bodyColor })\r\n          }\r\n        >\r\n          <Card.Header\r\n            className=\"category header\"\r\n            style={todo.category != \"\" ? {} : { display: \"none\" }}\r\n          >\r\n            {todo.category}\r\n          </Card.Header>\r\n          <Card.Body className=\"card-body\">\r\n            {\" \"}\r\n            <Card.Title className={this.changeCardTitle()} type=\"text\">\r\n              {todo.text}\r\n            </Card.Title>\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              onClick={this.toggleTodo}\r\n            >\r\n              Done\r\n            </Button>{\" \"}\r\n            <Button\r\n              variant=\"outline-danger\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                this.deleteTodoItem(todo.key);\r\n              }}\r\n            >\r\n              Delete\r\n            </Button>{\" \"}\r\n            <h4\r\n              className=\"menu-card\"\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              onClick={this.handleClick}\r\n            >\r\n              :\r\n            </h4>\r\n            {this.state.displayColorPicker ? (\r\n              <div style={popover}>\r\n                <div style={cover} onClick={this.handleClose} />\r\n                <TwitterPicker\r\n                  triangle=\"hide\"\r\n                  color={this.state.background}\r\n                  onChangeComplete={this.handleChangeComplete}\r\n                />\r\n              </div>\r\n            ) : null}\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  /**\r\n   * body color operations\r\n   */\r\n  handleClick = () => {\r\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ displayColorPicker: false });\r\n  };\r\n\r\n  handleChangeComplete = color => {\r\n    console.log(\"Previous color\", this.state.background);\r\n    this.setState({ background: color.hex });\r\n    this.colorChange(this.state.background);\r\n  };\r\n\r\n  colorChange = () => {\r\n    this.props.changeCardColorFn(this.props.todo, this.state.background);\r\n  };\r\n\r\n  /**\r\n   * rest of things\r\n   */\r\n  toggleTodo = () => {\r\n    console.log(\"pressed\");\r\n    this.props.updateTodoFn(this.props.todo);\r\n  };\r\n\r\n  deleteTodoItem = key => {\r\n    console.log(\"asked for deletion\");\r\n    this.props.deleteTodoFn(key);\r\n  };\r\n\r\n  changeCardTitle() {\r\n    let classes = \"todoItem\";\r\n    classes += this.props.todo.completed ? \" completed\" : \"\";\r\n    return classes;\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ToDoItem from \"../components/todoItem\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\n\r\nclass ToDoList extends Component {\r\n  render() {\r\n    const { todos } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Container className=\"container-fluid\">\r\n          <CardColumns>\r\n            {todos.map(_todo => {\r\n              return (\r\n                <ToDoItem\r\n                  key={_todo.key}\r\n                  todo={_todo}\r\n                  updateTodoFn={this.updateTodo}\r\n                  deleteTodoFn={() => {\r\n                    this.deleteTodoList(_todo.key);\r\n                  }}\r\n                  changeCardColorFn={this.changeCardColor}\r\n                ></ToDoItem>\r\n              );\r\n            })}\r\n          </CardColumns>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n  changeCardColor = (todo, color) => {\r\n    this.props.changeColorFn(todo, color);\r\n  };\r\n\r\n  updateTodo = todo => {\r\n    this.props.updateTodoFn(todo);\r\n  };\r\n\r\n  deleteTodoList = key => {\r\n    this.props.deleteTodoFn(key);\r\n  };\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { Component } from \"react\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nclass AddToDo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\",\r\n        category: \"\",\r\n        bodyColor: \"\"\r\n      }\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"row h-100\">\r\n        <div className=\"col-sm-12 my-auto\">\r\n          <div className=\"w-25 mx-auto\">\r\n            <div className=\"input-group mb-3\">\r\n              <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                  placeholder=\"New Task\"\r\n                  aria-label=\"New Task\"\r\n                  aria-describedby=\"basic-addon2\"\r\n                  value={this.props.currentItem}\r\n                  id={\"addTodoInput\"}\r\n                  onChange={e => {\r\n                    this.getElement(e);\r\n                  }}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button\r\n                    variant=\"outline-secondary\"\r\n                    id=\"Submit button\"\r\n                    onClick={e => {\r\n                      this.submitTodo(e);\r\n                    }}\r\n                  >\r\n                    Add Task\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getElement = e => {\r\n    let target = e.target.value;\r\n    let dataBefore = [];\r\n    let dataAfter = [];\r\n    let newWord = [];\r\n    let newDecorator = [];\r\n    let i = 0;\r\n    for (i = 0; i < target.length && target[i] != \"#\"; i++) {\r\n      dataBefore.push(target[i]);\r\n      newWord = dataBefore.join(\"\");\r\n    }\r\n    if (target[i] === \"#\") {\r\n      for (let j = i + 1; j < target.length; j++) {\r\n        dataAfter.push(target[j]);\r\n        newDecorator = dataAfter.join(\"\");\r\n      }\r\n    }\r\n    this.setState({\r\n      currentItem: {\r\n        text: newWord,\r\n        completed: false,\r\n        key: Date.now(),\r\n        category: newDecorator,\r\n        bodyColor: \"\"\r\n      }\r\n    });\r\n    console.log();\r\n  };\r\n\r\n  submitTodo = e => {\r\n    this.props.addTodo(this.state.currentItem);\r\n    document.getElementById(\"addTodoInput\").value = \"\";\r\n  };\r\n}\r\n\r\nexport default AddToDo;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport ToDoList from \"./components/todolist\";\nimport AddToDo from \"./components/addTodo\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      currentItem: {\n        text: \"\",\n        completed: false,\n        key: \"\",\n        category: \"\",\n        bodyColor: \"\"\n      }\n    };\n    this.addTodo = this.addTodo.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  componentDidMount = () => {\n    const todos = localStorage.getItem(\"todos\");\n    if (todos) {\n      const savedTodos = JSON.parse(todos);\n      this.setState({ todos: savedTodos });\n    } else {\n      console.log(\"No todos\");\n    }\n  };\n\n  addTodo = async todo => {\n    await this.setState({\n      todos: [...this.state.todos, todo],\n      currentItem: {\n        text: \"\",\n        completed: false,\n        key: \"\",\n        category: \"\",\n        bodyColor: \"\"\n      }\n    });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    console.log(\"Todos in storage\", localStorage.getItem(\"todos\"));\n  };\n\n  changeColor = async (todo, color) => {\n    console.log(\"received color request\", color);\n    const newColor = this.state.todos.map(_todo => {\n      if (todo === _todo) {\n        return {\n          text: todo.text,\n          completed: todo.completed,\n          key: _todo.key,\n          category: _todo.category,\n          bodyColor: color\n        };\n      } else {\n        return _todo;\n      }\n    });\n    await this.setState({ todos: newColor });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    console.log(\"todo with new color\", newColor);\n    console.log(\"Todos in storage\", localStorage.getItem(\"todos\"));\n  };\n\n  updateTodo = async todo => {\n    const newTodos = this.state.todos.map(_todo => {\n      if (todo === _todo) {\n        return {\n          text: todo.text,\n          completed: !todo.completed,\n          key: _todo.key,\n          category: _todo.category,\n          bodyColor: _todo.bodyColor\n        };\n      } else {\n        return _todo;\n      }\n    });\n    await this.setState({ todos: newTodos });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    console.log(newTodos);\n  };\n\n  deleteTodo = async key => {\n    const filteredTodos = this.state.todos.filter(todo => todo.key !== key);\n    await this.setState({ todos: filteredTodos });\n    console.log(this.state.todos);\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <AddToDo addTodo={this.addTodo} />\n        <ToDoList\n          handleInput={this.handleInput}\n          todos={this.state.todos}\n          currentItem={this.state.currentItem}\n          updateTodoFn={this.updateTodo}\n          deleteTodoFn={this.deleteTodo}\n          changeColorFn={this.changeColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}